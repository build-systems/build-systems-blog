---
import { ENABLE_LIGHTBOX } from "../../../server-constants.ts";
import { type Block } from "../../../lib/notion-interfaces.ts";
import { filePath } from "../../../lib/blog-helpers";
import Caption from "./Caption.astro";
import { Image } from "astro:assets";

export interface Props {
  block: Block;
}

const { block } = Astro.props;

let url: URL;
try {
  if (block.Image!.External) {
    url = new URL(block.Image!.External.Url);
  } else if (block.Image!.File) {
    url = new URL(block.Image!.File!.Url);
  }
} catch (error) {
  console.log("\nError while preparing URL: " + error);
}

let image: any;
let imageExtension: string;
if (block.Image!.File) {
  try {
    const images = await Astro.glob(
      "/src/assets/notion/**/*.{png,jpg,jpeg,avif,webp,svg}"
    );
    // console.dir(images);

    const imagename = decodeURIComponent(url!.pathname.split("/").slice(-1)[0]);
    // console.log("\nimagename NotionImage = " + imagename);

    const imagenamesimple = imagename.split(".")[0];
    // console.log("\nimagenamesimple NotionImage = " + imagenamesimple);
    imageExtension = imagename.split(".")[1];

    image = images.find((item) =>
      item.default.src.includes(imagenamesimple)
    )!.default;
    // console.dir(image);
  } catch (error) {
    console.log("\nError while getting image for astro component: " + error);
  }
}
---

<figure class="image">
  {
    // if it has valid url, is a downloaded file and is not svg
    url! && block.Image!.File && imageExtension! !== "svg" && (
      <div>
        <div>
          <Image
            src={image}
            alt="test"
            widths={[300, 700, 1000, 1280, 1400, 1600, image.width]}
            sizes={`(max-width: 300px) 300px, (max-width: 700px) 700px, (max-width: 1000px) 1000px, (max-width: 1280px) 1280px, (max-width: 1400px) 1400px, (max-width: 1600px) 1600px, ${image.width}px`}
          />
        </div>
        <Caption richTexts={block.Image!.Caption} />
      </div>
    )
  }
  {
    // if it has valid url, is a downloaded file and is not svg
    url! && block.Image!.File && imageExtension! === "svg" && (
      <div>
        <div>
          <Image src={image} alt="test" />
        </div>
        <Caption richTexts={block.Image!.Caption} />
      </div>
    )
  }
  {
    url! && block.Image!.External && (
      <div>
        <div>
          <Image src={url!.href} alt="Image in a image block" inferSize />
        </div>
        <Caption richTexts={block.Image!.Caption} />
      </div>
    )
  }
</figure>

<style>
  .image {
    display: flex;
    margin: 0.2rem auto 0;
  }
  .image > div {
    margin: 0 auto;
  }
  .image > div > div {
  }
  .image > div > div img {
    display: block;
    max-width: 100%;
    border-radius: var(--card-border-radius);
  }
</style>
