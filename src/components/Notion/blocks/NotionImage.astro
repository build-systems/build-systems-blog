---
import { ENABLE_LIGHTBOX } from "../../../server-constants.ts";
import { type Block } from "../../../lib/interfaces";
import { filePath } from "../../../lib/blog-helpers";
import Caption from "./Caption.astro";
import { downloadFile, getBlock } from "../../../lib/notion/client";
import { Image, Picture } from "astro:assets";

export interface Props {
  block: Block;
}

const { block } = Astro.props;

console.log("\n ====BLOCK====");
console.dir(block);

let url: URL;
try {
  if (block.Image!.External) {
    // Get URL but dont download it
    url = new URL(block.Image!.External.Url);
  } else if (block.Image!.File) {
    const expiryTime = block.Image!.File!.ExpiryTime;
    if (Date.parse(expiryTime!) > Date.now()) {
      url = new URL(block.Image!.File!.Url);
    } else {
      const fetchedBlock = await getBlock(block.Id);
      url = new URL(fetchedBlock.Image!.File!.Url);
    }
    await downloadFile(url!);
  }
} catch (error) {
  console.log("\nError while preparing URL: " + error);
}

console.log("\n ====BLOCK QUERY====");
let image: any;
if (block.Image!.File) {
  try {
    const images = await Astro.glob("/src/assets/notion/**/*.{png,jpg,jpeg}");
    console.dir(images);

    const imagename = decodeURIComponent(url!.pathname.split("/").slice(-1)[0]);
    console.log("\nimagename NotionImage = " + imagename);

    const imagenamesimple = imagename.split(".")[0];
    console.log("\nimagenamesimple NotionImage = " + imagenamesimple);

    image = images.find((item) =>
      item.default.src.includes(imagenamesimple)
    )!.default;
    console.dir(image);
  } catch (error) {
    console.log("\nError while getting image for astro component: " + error);
  }
}
---

<figure class="image">
  {
    block.Image!.File && (
      <div>
        <div>
          {ENABLE_LIGHTBOX ? (
            <a data-fslightbox href={image} data-type="image">
              <Image
                src={image}
                alt="Image in a image block"
                widths={[300, 700, 1000, 1280, 1400, 1600, image.width]}
                sizes={`(max-width: 300px) 300px, (max-width: 700px) 700px, (max-width: 1000px) 1000px, (max-width: 1280px) 1280px, (max-width: 1400px) 1400px, (max-width: 1600px) 1600px, ${image.width}px`}
              />
            </a>
          ) : (
            <Image src={url!.href} alt="Image in a image block" inferSize />
          )}
        </div>
        <Caption richTexts={block.Image!.Caption} />
      </div>
    )
  }
</figure>

<style>
  .image {
    display: flex;
    margin: 0.2rem auto 0;
  }
  .image > div {
    margin: 0 auto;
  }
  .image > div > div {
  }
  .image > div > div img {
    display: block;
    max-width: 100%;
  }
</style>
