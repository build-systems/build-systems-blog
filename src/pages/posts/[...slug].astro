---
import * as interfaces from "../../lib/interfaces.js";
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
} from "../../lib/notion/client.js";
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from "../../lib/blog-helpers.js";
import Layout from "../../layouts/NotionLayout.astro";
import PostDate from "../../components/Notion/PostDate.astro";
import PostTags from "../../components/Notion/PostTags.astro";
import PostTitle from "../../components/Notion/PostTitle.astro";
import PostBody from "../../components/Notion/PostBody.astro";
import PostRelativeLink from "../../components/Notion/PostRelativeLink.astro";
import BlogPostsLink from "../../components/Notion/BlogPostsLink.astro";
import BlogTagsLink from "../../components/Notion/BlogTagsLink.astro";
import styles from "../../styles/blog.module.css";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const posts = await getAllPosts();
  return posts.map((post: interfaces.Post) => ({
    params: { slug: post.Slug },
  }));
}

const { slug } = Astro.params;

const post = await getPostBySlug(slug);
if (!post) {
  throw new Error("Post not found. slug: ${slug}");
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
    getRankedPosts(),
    getPosts(5),
    getAllTags(),
    getPostsByTag(post.Tags[0]?.name, 6),
  ]);

const fileAtacchedBlocks = extractTargetBlocks("image", blocks)
  .concat(extractTargetBlocks("file", blocks))
  .filter((block) => {
    if (!block) {
      return false;
    }
    const imageOrFile = block.Image || block.File;
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url;
  });

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File)!.File!.ExpiryTime;
      if (Date.parse(expiryTime!) > Date.now()) {
        return Promise.resolve(block);
      }
      return getBlock(block.Id);
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL;
        try {
          url = new URL((block.Image || block.File)!.File!.Url);
        } catch (err) {
          console.log("Invalid file URL");
          return Promise.reject();
        }
        return Promise.resolve(url);
      })
    )
    .map((promise) => promise.then(downloadFile))
);

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug);
const prevPost = allPosts[currentPostIndex + 1];
const nextPost = allPosts[currentPostIndex - 1];

let ogImage = "";
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
    .pathname;
}

const url = post.FeaturedImage?.Url;
const dir = "src/assets/notion/" + url!.split("/").slice(-2)[0];
const imagename = decodeURIComponent(url!.split("/").slice(-1)[0]);
const imagepath = `${dir}/${imagename}`;
const images = await Astro.glob("../../assets/notion/**/*");
const image = images.find((post) => post.file.includes(imagepath))![0];
---

<BaseLayout
  title={"BuildSystems | " + post.Title}
  description={post.Excerpt}
  heroImage={ogImage}
  transition={true}
  current="blog"
>
  <div class="post">
    <h2 transition:name={post.Slug + "-title"}>{post.Title}</h2>
    <!-- <p>
      by {post.data.author} | {formatDate(post.data.publishDate)} | ~ {
        readingTime(post.body).text
      }
    </p> -->
    <Image
      src={image}
      alt="Alt text here"
      transition:name={post.Slug + "-image"}
      widths={[300, 700, 1000, 1280, 1400, 1600, image.width]}
      sizes={`(max-width: 300px) 300px, (max-width: 700px) 700px, (max-width: 1000px) 1000px, (max-width: 1280px) 1280px, (max-width: 1400px) 1400px, (max-width: 1600px) 1600px, ${image.width}px`}
    />
    <article class="content">
      <PostBody blocks={blocks} />
    </article>
  </div>
</BaseLayout>

<style>
  .post {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-top: 10svh;
  }

  h2 {
    text-align: center;
    text-wrap: balance;
  }

  img {
    width: clamp(200px, 100%, 700px);
    border-radius: var(--card-border-radius);
  }

  @media (max-width: 625px) {
    .post {
      margin-top: 10svh;
    }
  }
</style>
