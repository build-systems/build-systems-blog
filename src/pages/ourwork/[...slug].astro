---
import Anchor from "../../components/Anchor.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import BlogCarousel from "../../components/BlogCarousel/BlogCarousel.astro";
import { formatDate } from "../../utils/getPostData.js";
import { Image } from "astro:assets";
import type { Post } from "../../lib/notion-interfaces.js";
import PostBody from "../../components/Notion/PostBody.astro";
import {
  getAllPosts,
  getPostBySlug,
  getAllBlocksByBlockId,
  getAllPeople,
} from "../../lib/notion/client.js";
import {
  addSlugToName,
  filterPostsByTags,
  importCoverImage,
  removePostFromPosts,
  returnImageNameAsJpg,
} from "../../lib/blog-helpers.js";
import PersonCard from "../../components/PersonCard.astro";

export async function getStaticPaths() {
  const posts = await getAllPosts();
  return posts.map((post: Post) => ({
    params: { slug: post.Slug },
  }));
}

const { slug } = Astro.params;

const post = await getPostBySlug(slug);
if (!post) {
  throw new Error(`Post not found. slug: ${slug}`);
}

const [blocks] = await Promise.all([getAllBlocksByBlockId(post.PageId)]);

// Public image
let publicImage = "";
if (post.Cover) {
  const coverUrl = new URL(post.Cover!.Url);
  const dir = "notion/" + coverUrl.pathname.split("/").slice(-2)[0];
  const fileNameConverted = returnImageNameAsJpg(coverUrl);
  const fileNameWithSlug = addSlugToName(fileNameConverted, slug);
  publicImage = `${Astro.site}${dir}/${fileNameWithSlug}`;
}

// Getting images dynamically with import.meta.glob()
// It only accepts string literals
// https://docs.astro.build/en/recipes/dynamically-importing-images/
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/notion/**/*.{jpeg,jpg,png,tiff,webp,gif,svg,avif}"
);

// Cover image
const image = await importCoverImage(post, images);

// Authors
const authors = post.Authors;
const people = await getAllPeople();

// Get objects from 'people' array that have matching 'Name' property with 'authors' array
const matchingPeople = people.filter((person) =>
  authors.map((author) => author.name).includes(person.Name)
);

// Get all posts available
let posts = await getAllPosts();

// Remove the current post from the list
posts = removePostFromPosts(posts, post);

// Filter by tag
posts = filterPostsByTags(posts, post);
---

<BaseLayout
  title={"BuildSystems | " + post.Title}
  description={post.Description}
  image={publicImage}
  imageAlt={post.CoverAlt}
  transition={true}
>
  {
    image && (
      <Image
        class="cover-image"
        src={image}
        alt={post.CoverAlt}
        transition:name={slug + "-image"}
        widths={[300, 700, 1000, 1280, 1400, 1600, image.width]}
        sizes={`(max-width: 300px) 300px, (max-width: 700px) 700px, (max-width: 1000px) 1000px, (max-width: 1280px) 1280px, (max-width: 1400px) 1400px, (max-width: 1600px) 1600px, ${image.width}px`}
      />
    )
  }
  <article class:list={["post", "frame"]}>
    <Anchor text={post.Category} link="/" />
    <h2 transition:name={post.Slug + "-title"}>{post.Title}</h2>
    <p>{formatDate(new Date(post.PublishDate))}</p>
    <PostBody blocks={blocks} slug={slug} />
    <div class="cards-container">
      {
        matchingPeople.map((person, index) => {
          return (
            <PersonCard item={person} showDescription={false} sizeImage={98} />
          );
        })
      }
    </div>
  </article>
  <BlogCarousel posts={posts} />
</BaseLayout>
<style>
  .cover-image {
    -webkit-mask-image: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 1) 90%,
      rgba(0, 0, 0, 0)
    );
    mask-image: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 1) 90%,
      rgba(0, 0, 0, 0)
    );
  }

  .post {
    display: flex;
    flex-direction: column;
    align-items: start;
    justify-content: center;
    margin-top: 2rem;
    max-width: 68rem;
  }

  h2 {
    text-align: start;
    text-wrap: balance;
  }

  p {
    margin-bottom: 0;
    font-size: 1rem;
  }

  img {
    width: 100%;
    height: 100svh;
    object-fit: cover;
  }

  button {
    background-color: var(--background-body);
  }

  .cards-container {
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    gap: 0.5rem;
    z-index: 2;
    margin-top: 2rem;
  }

  @media (max-width: 920px) {
    .cards-container {
      grid-template-columns: repeat(1, minmax(0, 1fr));
    }

    .frame {
      margin-left: var(--left-padding-tablet);
      margin-right: var(--right-padding-tablet);
    }
  }

  @media (max-width: 640px) {
    .post {
      margin-top: 5svh;
    }

    img {
      width: 100svw;
      height: 55svh;
      object-fit: cover;
    }
  }
</style>
