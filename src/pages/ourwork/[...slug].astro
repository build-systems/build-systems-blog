---
import * as interfaces from "../../lib/interfaces.js";
import {
  getAllPosts,
  getPostBySlug,
  getAllBlocksByBlockId,
} from "../../lib/notion/client.js";
import { importCoverImage } from "../../lib/blog-helpers.js";
import PostBody from "../../components/Notion/PostBody.astro";
import styles from "../../styles/blog.module.css";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import { formatDate } from "../../utils/getPostData.js";
import Button from "../../components/Button.astro";

export async function getStaticPaths() {
  const posts = await getAllPosts();
  return posts.map((post: interfaces.Post) => ({
    params: { slug: post.Slug },
  }));
}

const { slug } = Astro.params;

const post = await getPostBySlug(slug);
if (!post) {
  throw new Error(`Post not found. slug: ${slug}`);
}

const [blocks] = await Promise.all([getAllBlocksByBlockId(post.PageId)]);

// Public image
let publicImage = "";
if (post.Cover) {
  const coverUrl = new URL(post.Cover!.Url);
  const dir = "/notion/" + coverUrl.pathname.split("/").slice(-2)[0];
  const filename = decodeURIComponent(
    coverUrl.pathname.split("/").slice(-1)[0]
  );
  publicImage = `${Astro.site}/${dir}/${filename}`;
}

// Get images
const images = await Astro.glob(
  "/src/assets/notion/**/*.{png,jpg,jpeg,avif,webp}"
);

// Cover image
const image = importCoverImage(post, images);

// Authors
const authors = post.Authors;
---

<BaseLayout
  title={"BuildSystems | " + post.Title}
  description={post.Description}
  heroImage={publicImage}
  transition={true}
  current="blog"
>
  <div class={styles.main}>
    {
      image && (
        <Image
          class="cover-image"
          src={image}
          alt={post.CoverAlt}
          transition:name={post.Slug + "-image"}
          widths={[300, 700, 1000, 1280, 1400, 1600, image.width]}
          sizes={`(max-width: 300px) 300px, (max-width: 700px) 700px, (max-width: 1000px) 1000px, (max-width: 1280px) 1280px, (max-width: 1400px) 1400px, (max-width: 1600px) 1600px, ${image.width}px`}
        />
      )
    }
  </div>
  <article class:list={[styles.post, "post", "frame"]}>
    <Button text={post.Category} link="/" />
    <h2 transition:name={post.Slug + "-title"}>{post.Title}</h2>
    <p>
      by
      {
        authors.map((author) => {
          return <span>{author.name}</span>;
        })
      },
      {formatDate(new Date(post.PublishDate))}
    </p>
    <PostBody blocks={blocks} />
  </article>

  <style>
    .cover-image {
      -webkit-mask-image: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 1) 90%,
        rgba(0, 0, 0, 0)
      );
      mask-image: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 1) 90%,
        rgba(0, 0, 0, 0)
      );
    }

    .post {
      display: flex;
      flex-direction: column;
      align-items: start;
      justify-content: center;
      margin-top: 2rem;
      max-width: 68rem;
    }

    h2 {
      text-align: start;
      text-wrap: balance;
    }

    img {
      width: 100svw;
      height: 100svh;
      object-fit: cover;
    }

    button {
      background-color: var(--background-body);
    }

    @media (max-width: 625px) {
      .post {
        margin-top: 10svh;
      }
    }
  </style>
</BaseLayout>
