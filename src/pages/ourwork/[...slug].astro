---
import type { Post } from "../../lib/notion-interfaces";
import {
  getAllPosts,
  getPostBySlug,
  getAllBlocksByBlockId,
} from "../../lib/notion/client.js";
import {
  filterPostsByTags,
  importCoverImage,
  removePostFromPosts,
} from "../../lib/blog-helpers.js";
import PostBody from "../../components/Notion/PostBody.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import { formatDate } from "../../utils/getPostData.js";
import Button from "../../components/Button.astro";
import BlogCarousel from "../../components/BlogCarousel/BlogCarousel.astro";

export async function getStaticPaths() {
  const posts = await getAllPosts();
  return posts.map((post: Post) => ({
    params: { slug: post.Slug },
  }));
}

const { slug } = Astro.params;

const post = await getPostBySlug(slug);
if (!post) {
  throw new Error(`Post not found. slug: ${slug}`);
}

const [blocks] = await Promise.all([getAllBlocksByBlockId(post.PageId)]);

// Public image
let publicImage = "";
if (post.Cover) {
  const coverUrl = new URL(post.Cover!.Url);
  const dir = "notion/" + coverUrl.pathname.split("/").slice(-2)[0];
  const filename = decodeURIComponent(
    coverUrl.pathname.split("/").slice(-1)[0]
  );
  publicImage = `${Astro.site}${dir}/${filename}`;
}
if (true) {
  // if (post.Slug === "cities-in-transition-von-muc-book") {
  console.log("\n===== Image =====");
  console.log("URL is: " + post.Cover!.Url);
  console.log("File path is: " + publicImage);
}

// Get images
const images = await Astro.glob(
  "/src/assets/notion/**/*.{png,jpg,jpeg,avif,webp}"
);

// Cover image
const image = importCoverImage(post, images);

// Authors
const authors = post.Authors;

// Get all posts available
let posts = await getAllPosts();

// Remove the current post from the list
posts = removePostFromPosts(posts, post);

// Filter by tag
posts = filterPostsByTags(posts, post);
---

<BaseLayout
  title={"BuildSystems | " + post.Title}
  description={post.Description}
  image={publicImage}
  imageAlt={post.CoverAlt}
  transition={true}
>
  {
    image && (
      <Image
        class="cover-image"
        src={image}
        alt={post.CoverAlt}
        transition:name={post.Slug + "-image"}
        widths={[300, 700, 1000, 1280, 1400, 1600, image.width]}
        sizes={`(max-width: 300px) 300px, (max-width: 700px) 700px, (max-width: 1000px) 1000px, (max-width: 1280px) 1280px, (max-width: 1400px) 1400px, (max-width: 1600px) 1600px, ${image.width}px`}
      />
    )
  }
  <article class:list={["post", "frame"]}>
    <Button text={post.Category} link="/" />
    <h2 transition:name={post.Slug + "-title"}>{post.Title}</h2>
    <!-- <p>
      {
        authors.map((author, i) => {
          if (i === 0) {
            return <span>{author.name}</span>;
          } else {
            return <span> + {author.name}</span>;
          }
        })
      }
    </p> -->
    <p>{formatDate(new Date(post.PublishDate))}</p>
    <PostBody blocks={blocks} />
  </article>
  <BlogCarousel posts={posts} />
</BaseLayout>
<style>
  .cover-image {
    -webkit-mask-image: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 1) 90%,
      rgba(0, 0, 0, 0)
    );
    mask-image: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 1) 90%,
      rgba(0, 0, 0, 0)
    );
  }

  .post {
    display: flex;
    flex-direction: column;
    align-items: start;
    justify-content: center;
    margin-top: 2rem;
    max-width: 68rem;
  }

  h2 {
    text-align: start;
    text-wrap: balance;
  }

  p {
    margin-bottom: 0;
    font-size: 1rem;
  }

  img {
    width: 100%;
    height: 100svh;
    object-fit: cover;
  }

  button {
    background-color: var(--background-body);
  }

  @media (max-width: 625px) {
    .post {
      margin-top: 5svh;
    }

    img {
      width: 100svw;
      height: 55svh;
      object-fit: cover;
    }
  }
</style>
